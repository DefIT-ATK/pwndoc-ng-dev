import { ref } from 'vue'
import { Notify } from 'quasar'
import { $t } from '@/boot/i18n'

/**
 * Composable for handling vulnerability import functionality
 */
export function useVulnerabilityImport() {
  const importing = ref(false)
  const selectedAudit = ref(null)
  
  const confirmImport = async (q, selectedVulnerabilities, auditOptions, auditId = null) => {
    if (selectedVulnerabilities.length === 0) {
      Notify.create({
        message: 'No vulnerabilities selected for import',
        color: 'warning',
        position: 'top-right'
      })
      return false
    }

    const targetAudit = auditId || selectedAudit.value
    if (!targetAudit) {
      Notify.create({
        message: 'Please select an audit first',
        color: 'warning',
        position: 'top-right'
      })
      return false
    }

    // Get audit name for confirmation message
    const selectedAuditOption = auditOptions.find(audit => audit.value === targetAudit)
    const auditName = selectedAuditOption ? selectedAuditOption.label : 'Unknown Audit'

    try {
      const confirmed = await new Promise((resolve) => {
        q.dialog({
          title: 'Confirm Import',
          message: `Are you sure you want to import ${selectedVulnerabilities.length} vulnerabilities to "${auditName}"?`,
          ok: {
            label: 'Import',
            color: 'primary'
          },
          cancel: {
            label: 'Cancel',
            color: 'grey'
          },
          persistent: true
        }).onOk(() => {
          resolve(true)
        }).onCancel(() => {
          resolve(false)
        }).onDismiss(() => {
          resolve(false)
        })
      })

      return confirmed
    } catch (error) {
      console.error('Error showing confirmation dialog:', error)
      return false
    }
  }
  
  const extractOriginalFindings = (selectedVulnerabilities) => {
    const allOriginalFindings = []
    for (const v of selectedVulnerabilities) {
      if (v.originalFinding && Array.isArray(v.originalFinding)) {
        allOriginalFindings.push(...v.originalFinding)
      } else {
        allOriginalFindings.push(v.originalFinding)
      }
    }
    return allOriginalFindings
  }
  
  const showImportSuccess = (toolName = '', count = null) => {
    let message
    if (toolName && count !== null) {
      message = `${count} ${toolName} vulnerabilities imported successfully`
    } else if (toolName) {
      message = `${toolName} vulnerabilities imported successfully`
    } else {
      message = 'Vulnerabilities imported successfully'
    }
      
    Notify.create({
      message,
      color: 'positive',
      position: 'top-right'
    })
  }
  
  const showImportError = (error, toolName = '') => {
    const message = toolName 
      ? `Error importing ${toolName} vulnerabilities`
      : 'Error importing vulnerabilities'
      
    console.error(message, error)
    Notify.create({
      message: error.message || message,
      color: 'negative',
      position: 'top-right'
    })
  }
  
  return {
    importing,
    selectedAudit,
    confirmImport,
    extractOriginalFindings,
    showImportSuccess,
    showImportError
  }
}
